@charset "UTF-8";

@import "variables";

@mixin border-radius-top {
  -moz-border-radius-topleft: $contentBorderRadius;
  -webkit-border-top-left-radius: $contentBorderRadius;
  border-top-left-radius: $contentBorderRadius;
  -moz-border-radius-topright: $contentBorderRadius;
  -webkit-border-top-right-radius: $contentBorderRadius;
  border-top-right-radius: $contentBorderRadius;
}

@mixin border-radius-bottom {
  -moz-border-radius-bottomright: $contentBorderRadius;
  -webkit-border-bottom-right-radius: $contentBorderRadius;
  border-bottom-right-radius: $contentBorderRadius;
  -moz-border-radius-bottomleft: $contentBorderRadius;
  -webkit-border-bottom-left-radius: $contentBorderRadius;
  border-bottom-left-radius: $contentBorderRadius;
}

@mixin border-radius($radius) {
  -moz-border-radius: $radius;
  -webkit-border-radius: $radius;
  border-radius: $radius;
}

@mixin linear-gradient($deg, $color1, $color2) {
  background: $color1;
  background: -moz-linear-gradient($deg, $color1 0%, $color2 100%);
  background: -webkit-linear-gradient($deg, $color1 0%, $color2 100%);
  background: -o-linear-gradient($deg, $color1 0%, $color2 100%);
  background: -ms-linear-gradient($deg, $color1 0%, $color2 100%);
  background: linear-gradient($deg, $color1 0%, $color2 100%);
}

@mixin stdHeading($textColor, $gradientFrom, $textSize) {
  margin: 0;
  color: $textColor;
  @include linear-gradient(90deg, $gradientFrom, lighten($gradientFrom, 2.3%));
  padding: 5px 20px 5px;
  font-family: $headingFont;
  font-size: $textSize;
  line-height: $textSize * 1.2;
  @if $headingTextShadow {
    @if ($textColor == rgb(51, 51, 51) or $textColor == rgb(68, 68, 68)) {
      text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);
    } @else {
      text-shadow: 0 1px 0 rgba(0, 0, 0, 0.5);
    }
  }
  @if type_of($headingFontBold) == 'bool' and $headingFontBold {
    font-weight: bold;
  }
  @if type_of($headingFontBold) == 'number' {
    font-weight: $headingFontBold;
  }
  @if $headingFontItalic {
    font-style: italic;
  }
  @if $headingFontUppercase {
    text-transform: uppercase;
  }
}

@mixin motionParagraphBlockquote() {
  font-size: inherit;
  padding-left: $fixedWidthTextQuotePadding;
  border-left-width: $fixedWidthTextQuoteBorder;
}

@mixin outlineOnFocusNoBorder() {
  border: solid 1px rgba(102, 175, 233, 0);
  box-sizing: border-box;
  box-shadow: none;
  transition: border ease-in-out 0.15s,box-shadow ease-in-out 0.15s;

  &:focus {
    border: solid 1px $focusBorderColor;
    box-shadow: 0 0 3px 2px $focusShadowColor;
    transition: border ease-in-out 0.15s,box-shadow ease-in-out 0.15s;
    outline: none;
  }
  body.usingMouse &:focus {
    border: solid 1px transparent;
    box-shadow: none;
  }
}

@mixin outlineOnFocusWithinNoBorder() {
  border: solid 1px rgba(102, 175, 233, 0);
  box-sizing: border-box;
  box-shadow: none;
  transition: border ease-in-out 0.15s,box-shadow ease-in-out 0.15s;

  &:focus-within {
    border: solid 1px $focusBorderColor;
    box-shadow: 0 0 3px 2px $focusShadowColor;
    transition: border ease-in-out 0.15s,box-shadow ease-in-out 0.15s;
    outline: none;
  }
  body.usingMouse &:focus-within {
    border: solid 1px transparent;
    box-shadow: none;
  }
}

@mixin outlineOnFocusHasBorder() {
  box-sizing: border-box;
  box-shadow: none;
  transition: border ease-in-out 0.15s,box-shadow ease-in-out 0.15s;

  &:focus {
    box-shadow: 0 0 3px 2px $focusShadowColor;
    transition: border ease-in-out 0.15s,box-shadow ease-in-out 0.15s;
    outline: none;
  }
  body.usingMouse &:focus {
    box-shadow: none;
  }
}
